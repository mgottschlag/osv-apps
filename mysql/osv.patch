Both items in this patch are due to currently unsupported facilities for OSv.
When we gain support for them, we should drop this.

In particular the socket one, it is possible to override that with a -D switch
during cmake configure. But overriding it with an empty string make the
conditional resolve to true.
--- a/storage/innobase/CMakeLists.txt	2014-07-18 19:48:39.000000000 +0400
+++ b/storage/innobase/CMakeLists.txt	2014-09-03 12:34:03.137064214 +0400
@@ -22,13 +22,13 @@ INCLUDE(CheckCSourceRuns)
 # OS tests
 IF(UNIX)
   IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
-    CHECK_INCLUDE_FILES (libaio.h HAVE_LIBAIO_H)
-    CHECK_LIBRARY_EXISTS(aio io_queue_init "" HAVE_LIBAIO)
+#    CHECK_INCLUDE_FILES (libaio.h HAVE_LIBAIO_H)
+#    CHECK_LIBRARY_EXISTS(aio io_queue_init "" HAVE_LIBAIO)
     ADD_DEFINITIONS("-DUNIV_LINUX -D_GNU_SOURCE=1")
-    IF(HAVE_LIBAIO_H AND HAVE_LIBAIO)
-      ADD_DEFINITIONS(-DLINUX_NATIVE_AIO=1)
-      LINK_LIBRARIES(aio)
-    ENDIF()
+#    IF(HAVE_LIBAIO_H AND HAVE_LIBAIO)
+#      ADD_DEFINITIONS(-DLINUX_NATIVE_AIO=1)
+#      LINK_LIBRARIES(aio)
+#    ENDIF()
   ELSEIF(CMAKE_SYSTEM_NAME MATCHES "HP*")
     ADD_DEFINITIONS("-DUNIV_HPUX")
   ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "AIX")
--- a/cmake/mysql_version.cmake	2014-07-18 19:48:39.000000000 +0400
+++ b/cmake/mysql_version.cmake 2014-09-03 14:31:31.580182813 +0400
@@ -83,7 +83,7 @@ ENDIF()
 
 
 IF(NOT MYSQL_UNIX_ADDR)
-  SET(MYSQL_UNIX_ADDR "/tmp/mysql.sock")
+  SET(MYSQL_UNIX_ADDR "")
 ENDIF()
 IF(NOT COMPILATION_COMMENT)
   SET(COMPILATION_COMMENT "Source distribution")
--- a/sql/sql_acl.cc	2017-09-28 13:23:12.536504772 +0200
+++ b/sql/sql_acl.cc	2014-09-11 15:53:31.000000000 +0200
@@ -3212,7 +3212,7 @@
       * An empty password is considered to be of mysql_native type.
     */
     
-    if (combo->plugin.str == NULL || combo->plugin.str == '\0')
+    if (combo->plugin.str == NULL || combo->plugin.str[0] == '\0')
     {
       if (combo->uses_identified_by_password_clause)
       {

--- a/sql/sql_connect.cc	2014-09-11 09:53:31.000000000 -0400
+++ b/sql/sql_connect.cc	2017-12-12 05:19:43.959754711 -0500
@@ -35,6 +35,8 @@
 #include "sql_acl.h"  // acl_getroot, NO_ACCESS, SUPER_ACL
 #include "sql_callback.h"
 
+#include "../../../../include/helper/introspection.hh"
+
 #include <algorithm>
 
 using std::min;
@@ -972,6 +974,8 @@
     NET *net= &thd->net;
     mysql_socket_set_thread_owner(net->vio->mysql_socket);
 
+    DBUG_PRINT("error", ("test output"));
+    introspection_marker("mysql prepare_connection");
     rc= thd_prepare_connection(thd);
     if (rc)
       goto end_thread;
@@ -979,12 +982,14 @@
     while (thd_is_connection_alive(thd))
     {
       mysql_audit_release(thd);
+      introspection_marker("mysql do_command");
       if (do_command(thd))
   break;
     }
     end_connection(thd);
 
 end_thread:
+    introspection_marker("mysql close_connection");
     close_connection(thd);
     if (MYSQL_CALLBACK_ELSE(thread_scheduler, end_thread, (thd, 1), 0))
       return;                                 // Probably no-threads
--- a/sql/main.cc	2014-09-11 09:53:31.000000000 -0400
+++ b/sql/main.cc	2017-12-21 09:29:37.478436767 -0500
@@ -14,6 +14,8 @@
    along with this program; if not, write to the Free Software Foundation,
    51 Franklin Street, Suite 500, Boston, MA 02110-1335 USA */
 
+#include "../../../../include/helper/introspection.hh"
+
 /* 
   main() for mysqld.
   Calls mysqld_main() entry point exported by sql library.
@@ -22,5 +24,6 @@
 
 int main(int argc, char **argv)
 {
+  introspection_init();
   return mysqld_main(argc, argv);
 }

